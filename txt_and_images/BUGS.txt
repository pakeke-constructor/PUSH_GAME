


Error: libs/spatial_partition/partition.lua:129: Not a number (NaN) found in obj table: 0x1cfdee70. Ensure objects don't have NaN as their x or y fields.
stack traceback:
        [string "boot.lua"]:777: in function <[string "boot.lua"]:773>
        [C]: in function 'error'
        libs/spatial_partition/partition.lua:186: in function 'getSet'
        libs/spatial_partition/partition.lua:129: in function 'updateObj'
        libs/spatial_partition/partition.lua:121: in function 'update'
        src/systems/PartitionSys.lua:37: in function <src/systems/PartitionSys.lua:36>
        libs/Cyan/cyan.lua:73: in function 'call'
        src/misc/unique/gamestate.lua:21: in function 'update'
        [string "boot.lua"]:612: in function <[string "boot.lua"]:594>
        [C]: in function 'xpcall'

SHIIIIT MAN. No T_DUMP for this as well, this could easily be an uncatchable
nightmare bug






Enemy count in WinSys is negative. This could be a bug in Cyan.lua...
hopefully not

ahhh crap man, its error time.
If you can, please contact Oli and show a full screenshot of this screen. TY!
       PLATFORM : Windows
src/systems/WinSys.lua:125: wtf man...

Traceback
conf.lua:112: in function 'handler'
[C]: in function 'error'
src/systems/WinSys.lua:125: in function <src/systems/WinSys.lua:123>
libs/Cyan/cyan.lua:73: in function 'call'
src/misc/unique/gamestate.lua:21: in function 'update'
[C]: in function 'xpcall'

TODO
TODO
TODO
TODO!!!!
OKAY, I figured out the bug.
The bug is due to the nature of Cyan.clear and Cyan.flush.
ECS is only flushed on a root ccallback. So when :purge is invoked,
the entities are cleared, but entities remain in the ECS because :purge is not a 
root call, and is instead called from `InteractionSys`. From there, 
:newWorld is called directly. This sets the WinSys enemy counters
to 0 instantly, however, at the next ECS flush, the old entities that are not 
supposed to be apart of the new world are killed, and WinSys thinks
that they were apart of the new world. Since the entities from the previous world
obviously did not contribute to the total enemy counter, this is why enemy count
pops into the negatives. PHEW... ok, now how to fix:

A solution would be to delay the worldgen by a frame and call it at a root call.
This would probably involve some extra functions in Cyan.
A hacky alternative would be to plug the :newWorld call into the next update loop.
We know that update will always (or should always, TODO add a check for this) be
one level up from the root level.